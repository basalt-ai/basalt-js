{"code":"","references":[],"dts":{"name":"/Users/guillaumemarquis/code/basalt/packages/js-sdk/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/lib/contract.d.ts","writeByteOrderMark":false,"text":"/**\n * Interface for the Basalt SDK.\n */\nexport interface IBasaltSDK {\n    readonly prompt: IPromptSDK;\n}\n/**\n * Interface for the Prompt SDK.\n */\n/**\n * @preserve\n * Interface for interacting with Basalt prompts.\n *\n * @example\n * ```typescript\n * const promptSDK: IPromptSDK = ...; // Assume this is initialized\n *\n * // Example 1: Fetching a prompt by slug with optional parameters\n * const result1 = await promptSDK.get('example-slug', { version: '1.0.0' });\n * if (result1.error) {\n *   console.log('Error fetching prompt:', result1.error.message);\n * } else {\n *   console.error('Prompt fetched successfully:', result1.value);\n * }\n *\n * // Example 2: Fetching a prompt a single object\n * const result2 = await promptSDK.get({ slug: 'example-slug', tag: 'example-tag' });\n * if (result2.error) {\n *   console.log('Error fetching prompt:', result2.error.message);\n * } else {\n *   console.error('Prompt fetched successfully:', result2.value);\n * }\n * ```\n */\nexport interface IPromptSDK {\n    /**\n     * Get a prompt from the Basalt API\n     *\n     * @param slug - The slug of the prompt.\n     * @param options - Optional parameters for the request.\n     * \t\t- version: The version of the prompt.\n     * \t\t- tag: The tag of the prompt.\n     * \t\t- variables: Variables to be replaced in the prompt.\n     * \t\t- cache: Enable or disable cache for this request.\n     *\n     * @example\n     * ```typescript\n     * const result = await basalt.prompt.get('my-prompt', { version: '1.0.0' });\n     *\n     * if (result.error) {\n     *   console.log(result.error.message);\n     *   return;\n     * }\n     *\n     * // Find the value in result.value\n     * result.value.text // Your prompt as a string\n     * ```\n     *\n     * @returns Promise of a Result object containing prompt or any ocurred error.\n     */\n    get(slug: string, options?: Omit<GetPromptOptions, 'slug'>): AsyncResult<PromptResponse>;\n    /**\n     * Get a prompt from the Basalt API using the full options\n     *\n     * @param {GetPromptOptions} options - Options to the select the prompt\n     *\n     * @example\n     * ```typescript\n     * const result = await basalt.prompt.get({ slug: 'my-prompt', tag: 'staging' });\n     *\n     * if (result.error) {\n     *   console.log(result.error.message);\n     *   return;\n     * }\n     *\n     * // Find the value in result.value\n     * result.value.text // Your prompt as a string\n     * ```\n     *\n     * @returns Promise of a Result object containing prompt or any ocurred error.\n     */\n    get(options: GetPromptOptions): AsyncResult<PromptResponse>;\n}\n/**\n * Options for the `get` method of the `IPromptSDK` interface.\n */\nexport type GetPromptOptions = {\n    slug: string;\n    version?: string;\n    tag?: string;\n    variables?: VariablesMap;\n    /**\n     * @var cache - Enable or disable cache for this request.\n     * @default true\n     */\n    cache?: boolean;\n};\nexport type VariablesMap = Record<string, string>;\nexport type PromptModel = AnthropicPromptModel | OpenAIPromptModel | MistralPromptModel;\nexport interface AnthropicPromptModel extends BasePromptModel {\n    provider: 'anthropic';\n    model: '3.5-sonnet' | '3-sonnet' | '3-haiku';\n}\nexport interface OpenAIPromptModel extends BasePromptModel {\n    provider: 'open-ai';\n    model: 'gpt-4o' | 'gpt-4o-mini' | 'gpt-3.5-turbo' | 'o1-preview' | 'o1-mini';\n}\nexport interface MistralPromptModel extends BasePromptModel {\n    provider: 'mistral';\n    model: 'mistral-large' | 'mistral-8x7B' | 'mistral-7b';\n}\nexport interface GeminiPromptModel extends BasePromptModel {\n    provider: 'gemini';\n    model: 'gemini-1.5-flash' | 'gemini-1.5-flash-8b' | 'gemini-1.5-pro';\n}\nexport interface BasePromptModel {\n    provider: 'anthropic' | 'open-ai' | 'mistral' | 'gemini';\n    model: string;\n    version: string | 'latest';\n    parameters: {\n        temperature: number;\n        topP: number;\n        frequencyPenalty?: number;\n        presencePenalty?: number;\n        topK?: number;\n        maxLength: number;\n        responseFormat: ResponseFormat;\n        jsonObject?: Record<string, any>;\n    };\n}\nexport type ResponseFormat = 'json' | 'text' | 'json-object';\n/**\n * Response type for the `get` method of the `IPromptSDK` interface.\n */\nexport type PromptResponse = {\n    text: string;\n    model: PromptModel;\n};\n/**\n * Result wrapper type\n */\nexport type Result<Wrapped, Error = ErrObj> = {\n    error: null;\n    value: Wrapped;\n} | {\n    error: Error;\n    value: null;\n};\n/**\n * Result type for asynchronous operations\n */\nexport type AsyncResult<Wrapped, Error = ErrObj> = Promise<Result<Wrapped, Error>>;\n/**\n * HTTP methods for fetch requests\n */\nexport type FetchMethod = 'get' | 'post' | 'put' | 'delete';\n/**\n * Response type for fetch requests\n */\nexport type FetchResponse = any;\n/**\n * Error type for fetch requests\n */\nexport type ErrObj = {\n    message: string;\n};\n/**\n * Interface for the Networker\n */\nexport interface INetworker {\n    /**\n     * Fetch an endpoint over the network\n     *\n     * @param url - The URL to query\n     * @param method - The HTTP method to use\n     * @param body - Optional request body\n     */\n    fetch(url: URL, method: FetchMethod, body?: BodyInit, headers?: HeadersInit): AsyncResult<FetchResponse>;\n}\n/**\n * Interface for a cache\n */\nexport interface ICache {\n    /**\n     * Get a value from the cache\n     * @param key - The key of the value to get\n     */\n    get<T = unknown>(key: string): T | undefined;\n    /**\n     * Set a value in the cache\n     * @param key - The key of the value to set\n     * @param value - The value to set\n     * @param duration - Optional duration for the cache entry\n     */\n    set(key: string, value: unknown, duration?: number): void;\n}\n/**\n * Type for query parameters\n */\nexport type QueryParamsObject = Record<string, string | undefined>;\n/**\n * Interface for the API.\n */\nexport interface IApi {\n    invoke<Input, Output>(endpoint: IEndpoint<Input, Output>, dto: Input): AsyncResult<Output>;\n}\nexport interface IEndpoint<Input, Output> {\n    prepareRequest(dto: Input): {\n        path: string;\n        method: FetchMethod;\n        body?: BodyInit;\n        query?: QueryParamsObject;\n    };\n    decodeResponse(body: unknown): Result<Output>;\n}\nexport type LogLevel = 'all' | 'warning' | 'none';\nexport interface ILogger {\n    warn(msg: any, ...args: any[]): void;\n}\n"}}
