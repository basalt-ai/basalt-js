{"code":"","references":["/Users/guillaumemarquis/code/basalt/packages/js-sdk/src/lib/contract.ts"],"dts":{"name":"/Users/guillaumemarquis/code/basalt/packages/js-sdk/node_modules/.cache/rollup-plugin-typescript2/placeholder/src/lib/memorycache.d.ts","writeByteOrderMark":false,"text":"import type { ICache } from './contract';\n/**\n * In-memory implementation of the ICache interface.\n * It stores key-value pairs in memory and supports time-to-live (TTL) for each entry.\n */\nexport default class MemoryCache implements ICache {\n    /**\n     * Cache record\n     */\n    private _mem;\n    /**\n     * Record for cache entry timeouts\n     */\n    private _timeouts;\n    /**\n     * Retrieve a value from the cache\n     *\n     * @template T - The expected type of the cached value\n     * @param {string} key - The key of the cache entry to retrieve\n     * @returns {T | undefined} - The cached value if it exists and has not expired, otherwise undefined\n     */\n    get<T = unknown>(key: string): T | undefined;\n    /**\n     * Store a value in the cache with an optional time-to-live (TTL).\n     *\n     * @param {string} key - The key of the cache entry to store.\n     * @param {unknown} value - The value to store in the cache.\n     * @param {number} [ttl=Infinity] - The time-to-live in milliseconds. Defaults to Infinity.\n     */\n    set(key: string, value: unknown, ttl?: number): void;\n}\n"}}
