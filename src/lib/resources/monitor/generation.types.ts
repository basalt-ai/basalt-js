import { BaseLog, BaseLogParams } from './base-log.types'

/**
 * Variables used in prompt templates for AI model generations.
 *
 * These key-value pairs are used to fill in placeholders in prompt templates.
 *
 * @example
 * ```typescript
 * // Variables for a QA prompt
 * const variables: GenerationVariable = {
 *   style: 'concise',
 *   language: 'en',
 *   format: 'markdown'
 * };
 * ```
 *
 * @preserve
 */
export type GenerationVariable = Record<string, string | null | undefined>

/**
 * Parameters for creating a new generation, which can be either with or without a prompt reference.
 *
 * @preserve
 */
export type CreateGenerationParams = CreateGenerationWithPromptParams | CreateGenerationWithoutPromptParams

/**
 * Type guard to check if generation parameters include a prompt reference.
 *
 * @param params - The generation parameters to check.
 * @returns True if the parameters include a prompt reference, false otherwise.
 *
 * @example
 * ```typescript
 * // Check if generation params include a prompt reference
 * if (hasPrompt(generationParams)) {
 *   // Now TypeScript knows this has a prompt property
 *   console.log(`Using prompt: ${generationParams.prompt.slug}`);
 * } else {
 *   // Handle the case without a prompt
 *   console.log('No prompt reference provided');
 * }
 * ```
 */
export function hasPrompt(params: CreateGenerationParams): params is CreateGenerationWithPromptParams {
	return 'prompt' in params
}

/**
 * Parameters for creating a generation with a reference to a prompt template.
 *
 * This is used when the generation is based on a known prompt that is tracked in the system.
 *
 * @example
 * ```typescript
 * // Parameters for creating a generation with a prompt reference
 * const params: CreateGenerationWithPromptParams = {
 *   name: 'answer-generation',
 *   prompt: { slug: 'qa-prompt', version: '2.1.0' },
 *   input: 'What is the capital of France?',
 *   variables: { style: 'concise', language: 'en' },
 *   metadata: { modelVersion: 'gpt-4' }
 * };
 * ```
 *
 * @preserve
 */
export interface CreateGenerationWithPromptParams extends Partial<Omit<BaseLogParams, 'trace'>> {
	/**
	 * Information about the prompt used for generation.
	 */
	prompt: GenerationPrompt

	/**
	 * The input provided to the model.
	 */
	input?: string | undefined

	/**
	 * Variables used in the prompt template.
	 */
	variables?: GenerationVariable

	/**
	 * The output generated by the model.
	 */
	output?: string
}

/**
 * Parameters for creating a generation without a reference to a prompt template.
 *
 * This is used for ad-hoc generations that don't use a tracked prompt.
 *
 * @example
 * ```typescript
 * // Parameters for creating a generation without a prompt reference
 * const params: CreateGenerationWithoutPromptParams = {
 *   name: 'text-completion',
 *   input: 'Complete this sentence: The sky is',
 *   output: 'The sky is blue and vast.'
 * };
 * ```
 *
 * @preserve
 */
export interface CreateGenerationWithoutPromptParams extends Omit<BaseLogParams, 'trace'> {
	/**
	 * The input provided to the model.
	 */
	input?: string | undefined

	/**
	 * The output generated by the model.
	 */
	output?: string
}

/**
 * Parameters that can be updated on an existing generation.
 * The trace cannot be changed after creation.
 *
 * @preserve
 */
export type UpdateGenerationParams = Partial<Omit<GenerationParams, 'trace'>>

/**
 * Generation interface representing an AI model generation within a trace or span.
 *
 * Generations track interactions with AI models, including the inputs, outputs,
 * and prompt information used for the generation.
 *
 * @example
 * ```typescript
 * // Create a generation with a prompt reference
 * const generation = trace.createGeneration({
 *   name: 'answer-generation',
 *   prompt: { slug: 'qa-prompt', version: '2.1.0' },
 *   input: 'What is the capital of France?'
 * });
 *
 * // Start the generation (if not already started)
 * generation.start();
 *
 * // End the generation with output
 * generation.end('The capital of France is Paris.');
 *
 * // Update generation metadata
 * generation.update({
 *   metadata: {
 *     modelVersion: 'gpt-4',
 *     tokensUsed: 42
 *   }
 * });
 * ```
 *
 * @preserve
 */
export interface Generation extends GenerationParams, BaseLog {
	/**
	 * Marks the generation as started and sets the input if provided.
	 *
	 * @param input - Optional input data to associate with the generation.
	 * @returns The generation instance for method chaining.
	 *
	 * @example
	 * ```typescript
	 * // Start a generation without input
	 * generation.start();
	 *
	 * // Start a generation with input
	 * generation.start('What is the capital of France?');
	 * ```
	 */
	start(input?: string): Generation

	/**
	 * Marks the generation as ended and sets the output if provided.
	 *
	 * @param output - Optional output data from the model.
	 * @returns The generation instance for method chaining.
	 *
	 * @example
	 * ```typescript
	 * // End a generation without output
	 * generation.end();
	 *
	 * // End a generation with output
	 * generation.end('The capital of France is Paris.');
	 * ```
	 */
	end(output?: string): Generation

	/**
	 * Updates the generation with new parameters.
	 *
	 * @param params - The parameters to update.
	 * @returns The generation instance for method chaining.
	 *
	 * @example
	 * ```typescript
	 * // Update generation parameters
	 * generation.update({
	 *   name: 'Updated generation name',
	 *   metadata: {
	 *     modelVersion: 'gpt-4',
	 *     tokensUsed: 42,
	 *     processingTime: '120ms'
	 *   }
	 * });
	 * ```
	 */
	update(params: UpdateGenerationParams): Generation
}

/**
 * Parameters for creating or updating a generation.
 *
 * @preserve
 */
export interface GenerationParams extends BaseLogParams {
	/**
	 * Information about the prompt used for generation.
	 */
	prompt?: GenerationPrompt | undefined

	/**
	 * The input provided to the model.
	 */
	input?: string | undefined

	/**
	 * Variables used in the prompt template.
	 */
	variables?: GenerationVariable

	/**
	 * The output generated by the model.
	 */
	output?: string
}

/**
 * Options for configuring generation behavior.
 *
 * @example
 * ```typescript
 * // Configuration for a single-turn generation
 * const options: GenerationOptions = {
 *   type: 'single'
 * };
 *
 * // Configuration for a multi-turn or streaming generation
 * const streamingOptions: GenerationOptions = {
 *   type: 'multi'
 * };
 * ```
 *
 * @preserve
 */
export interface GenerationOptions {
	/**
	 * The type of generation:
	 * - 'single': A one-time generation
	 * - 'multi': A multi-turn conversation or streaming generation
	 */
	type: 'single' | 'multi'
}

/**
 * Information about the prompt used for generation.
 *
 * @example
 * ```typescript
 * // Basic prompt reference with just a slug
 * const basicPrompt: GenerationPrompt = {
 *   slug: 'qa-prompt'
 * };
 *
 * // Detailed prompt reference with version and tag
 * const detailedPrompt: GenerationPrompt = {
 *   slug: 'qa-prompt',
 *   version: '2.1.0',
 *   tag: 'production'
 * };
 * ```
 *
 * @preserve
 */
export interface GenerationPrompt {
	/**
	 * Unique identifier for the prompt template.
	 */
	slug: string

	/**
	 * Version of the prompt template.
	 */
	version?: string | undefined

	/**
	 * Optional tag for the prompt template, used for A/B testing or categorization.
	 */
	tag?: string | undefined
}

// Type guards
/**
 * Type guard to check if a log is a generation.
 *
 * @param log - The log to check.
 * @returns True if the log is a generation, false otherwise.
 *
 * @example
 * ```typescript
 * // Check if a log is a generation before using generation-specific methods
 * if (isGeneration(log)) {
 *   // Now TypeScript knows this is a Generation
 *   log.update({ variables: { style: 'detailed' } });
 * }
 * ```
 */
export function isGeneration(log: BaseLog): log is Generation {
	return log.type === 'generation'
}
